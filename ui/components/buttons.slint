import { Pallet } from "./style.slint";

export component SimpleButton {
    in-out property <brush> background: Pallet.primary;
    in-out property <brush> background-select: Pallet.simple-button-pressed;
    in-out property <length> border-width;
    in-out property <brush> border-color;
    in-out property <length> border-radius: 4px;

    // Click Function
    callback clicked();
    property <bool> active: false;


    Rectangle {
        background: root.background;
        border-width: root.border-width;
        border-color: root.border-color;
        border-radius: root.border-radius;

        @children

        ta := TouchArea {
            clicked => {
                clicked();
                active = !active;
            }
        }
    
        states [
            active when ta.pressed: {
                background: root.background-select;
            }
        ] 
    }
}

export component ToggleButton {
    in property <string> text: "";

    property <brush> text-color: Pallet.toggle-button-text;

    // Click Function
    callback clicked();
    in-out property <bool> active: false;

    in property <brush> background: Pallet.toggle-button;
    in property <brush> background-active: Pallet.toggle-button-active;

    BG := Rectangle {
        background: root.background;
        border-radius: 4px;

        if text != "" || text != " ": Text {
            text: root.text;

            font-size: 13px;
            font-weight: 700;
            
            color: text-color;
            
            vertical-alignment: center;
            horizontal-alignment: center;
        }

        @children
    }

    ta := TouchArea {
        clicked => {
            clicked();
            active = !active;
        }
    }

    states [
        active when active: {
            BG.background: root.background-active;
            text-color: Pallet.toggle-button-active-text;
        }
    ] 
}

export component ToggleSlide {
    in property <length> slide-offset: 8px;
    in-out property <bool> toggled: true;

    callback clicked();

    in property <brush> toggled-color: #188BFF;
    in property <brush> untoggled-color: #3f3f3f;

    width: 100px;
    height: 50px;
    in property <length> border-radius: root.height / 2;
    
    Rectangle {
        width: root.width;
        height: root.height;

        border-radius: root.border-radius;
        
        background: untoggled-color;
        

        slide := Rectangle {
            background: #e2e2e2;
            
            height: root.height - (slide-offset);
            width: root.height - (slide-offset);
            
            border-radius: self.height / 2;
            
            x: slide-offset/2;
            
            animate x {
                duration: 0.15s;
                easing: ease-in;
            }
            
        }

        animate background {
            delay: 0.075s;
            duration: 0.15s;    
            easing: ease-out;
        }
        
        // Click Function
        
        ta := TouchArea {
            clicked => {
                toggled = !toggled;
                clicked();
            }
        } 
        
        states [
            toggled when toggled: {
                background: toggled-color;
                slide.x: root.width - slide.width - (slide-offset/2);
            } 
        ] 
    }
}

export struct MatrixRadioButton {
    id: int,
    mode: int,
    text: string,
    active: bool,
}

export struct ButtonInfo {
    id: int,
    text: string,
    active: bool,
}

export component MatrixRadio{
    min-width: 200px;
    min-height: 100px;

    in-out property <[MatrixRadioButton]> buttons: [ {id: 0, text: "A", active: false}];
    in-out property <MatrixRadioButton> active;

    in property <length> button-width: 40px;
    in property <length> button-height: 40px;
    in property <length> button-radius: 3px;

    in property <length> button-spacing: 10px;

    in property <length> button-padding: 20px;
    
    in property <length> text-size: 16px;

    in property <brush> active-color: Pallet.toggle-button-active;
    in property <brush> inactive-color: Pallet.toggle-button;

    in property <int> columns: 3;
    in property <int> rows: 3;

    VerticalLayout {
        alignment: space-between;
        padding-bottom: button-height/2 + button-padding;
        padding-top: button-height/2 + button-padding;
        padding-left: button-width/2 + button-padding;
        padding-right: button-width/2 + button-padding;

        spacing: button-spacing;


        property <int> row_loop: Math.ceil(buttons.length / columns);

        for i in row_loop: HorizontalLayout {
            spacing: button-spacing;
            alignment: space-between;

            property <int> col-loop: Math.min(columns, buttons.length - i * columns);

            for j in col-loop: Rectangle {
                property <int> idx: i * columns + j;

                if idx < buttons.length: Rectangle {
                    width: button-width;
                    height: button-height;
                    border-radius: button-radius;

                    background: buttons[idx].active ? active-color : inactive-color;

                    Text {
                        text: buttons[idx].text;
                        font-family: "Roboto";
                        font-weight: 700;
                        font-size: root.text-size;
                        color: buttons[idx].active ? Pallet.toggle-button-active-text : Pallet.toggle-button-text;
                    }

                    ta := TouchArea {
                        clicked => {
                            buttons[root.active.id].active = false;
                            buttons[idx].active = true;
                            root.active = buttons[idx];
                        }
                    }
                }
            }
        }
    }

}

export component ButtonList {
    in property <length> button-width: 40px;
    in property <length> button-height: 40px;
    in property <length> button-spacing: 4px;

    in property <brush> button-background: Pallet.toggle-button;
    in property <brush> button-background-active: Pallet.toggle-button-active;

    in-out property <[ButtonInfo]> buttons: [  {id: 0, text: "A", active: false}, 
                                               {id: 1, text: "B", active: false},
                                               {id: 2, text: "C", active: false}];
    in-out property <ButtonInfo> current-button;

    VerticalLayout {
        spacing: button-spacing;
        
        for radio in buttons: SimpleButton {
            width: button-width;
            height: button-height;
    
            background: radio.id == current-button.id ? button-background-active : button-background;

            Text {
                text: radio.text;
                font-family: "Roboto";
                font-weight: 700;
                color: radio.id == current-button.id ? Pallet.toggle-button-active-text : Pallet.toggle-button-text;
            }

            clicked => {
                current-button = radio;
            }
        }
    }
}

export struct elevator {
    id: int,
    brand: string,
    types: [string],
}

export component SlotMachineSelector inherits Rectangle {
    width: 300px;
    height: 225px;
    clip: true;


    in property <length> button-height: 50px;
    in property <length> button-width: 250px;
    in property <length> button-spacing: 10px;

    in property <brush> button-background: Pallet.slot-machine-button-blue;
    in property <brush> button-background-active: Pallet.slot-machine-button-blue-active; 

    in property <brush> button-text: Pallet.slot-machine-button-text; 
    in property <brush> button-text-active: Pallet.slot-machine-button-text-active; 

    in property <[ButtonInfo]> items: [ { id: 0, text: "Elevator 1"},
                                        { id: 1, text: "Elevator 2"},
                                        { id: 2, text: "Elevator 3"},
                                        { id: 3, text: "Elevator 4"},
                                        { id: 4, text: "Elevator 5"}];

    in-out property <ButtonInfo> current-item;
    in-out property <string> current-item-text;

    
    container := Rectangle {
        property <length> y-pos: (parent.height / 2) - ((button-height + button-spacing) / 2) + (1px - (button-height + button-spacing) * current-item.id);
        
        y: y-pos;
        
        animate y {
            duration: 0.5s;
            easing: ease-out-expo;
        }

        // Main Elevator Button
        for elevator in items: SimpleButton {
            width: button-width + Math.abs(current-item.id - elevator.id) * -20px;
            height: button-height;
            
            // x: 20px;

            animate y, width, background {
                duration: 0.5s;
                easing: ease-out-expo;
            }


            y: (self.height + button-spacing ) * elevator.id;
            
            background: elevator.id == current-item.id ? button-background-active : button-background;
            background-select: self.background;

            Text {
                text: elevator.text;
                font-family: "Roboto";
                horizontal-alignment: left;
                x: 12px;
                font-size: elevator.id == current-item.id ? 18px : 14px;
                font-weight: 700;
                color: elevator.id == current-item.id ? Pallet.slot-machine-button-text-active : Pallet.slot-machine-button-text;

                animate color, font-size {
                    duration: 0.5s;
                    easing: ease-out-expo;
                }
            }
            
            clicked => {
                current-item = elevator;
            }
        }
    }

    Rectangle {
        y: 0;
        width: parent.width;
        height: 50px;

        background: @linear-gradient(0deg, transparent 0%, Pallet.panel-background 100%);
    }

    Rectangle {
        y: container.height - self.height;
        width: parent.width;
        height: 50px;

        background: @linear-gradient(180deg, transparent 0%, Pallet.panel-background 100%);
    }

    ta := TouchArea {

        property <int> pressed-value: 0;

        pointer-event(event) => {
            if(event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                debug("\n\n-------------PRESSED-------------");
                debug("pressed-value: " + pressed-value);
                debug("pressed-x: " + ta.pressed-x / 1px);
                debug("pressed-y: " + ta.pressed-y / 1px);
                debug("-------------------------------------\n\n");
            }

            if(event.button == PointerEventButton.left && event.kind == PointerEventKind.up) {
                debug("\n\n-------------RELEASED-------------\n");
                last-offset = offset;
            }
        }


        // DEBUG
        // Text {
        //     x: 10px;
        //     y: 10px;
        //     text: "Distance           : " + distance + 
        //           "\nOffset           : " + offset;
        // }
        
        property <float> distance;
        property <float> offset;
        property <float> last-offset;
        property <bool> is-set: false;

        moved => {

            if(self.enabled && self.pressed) {
                distance = ((ta.mouse-y - ta.pressed-y + last-offset * 1px) / 1px); 
            }
      

            if(distance >= offset + 100px / 1px) {
                if(current-item.id > 0) {
                    current-item.id -= 1;
                    offset += 100;
                    debug("\noffset: " + offset);
                }
            }
            else if(distance <= offset - 100px / 1px) {
                if(current-item.id < items.length - 1) {
                    current-item.id += 1;
                    offset -= 100;
                }
            }

            current-item-text = items[current-item.id].text;
        }
    }
}


export component DropDown {
    in-out property <length> button-width: 200px;
    in-out property <length> button-height: 40px;

    in-out property <length> font-size: 16px;
    in-out property <brush> font-color: white;

    in-out property <bool> go-up: false;

    in-out property <[ButtonInfo]> items: [{id: 0, text: "Item 1", active: false},
                                    {id: 1, text: "Item 2", active: false},
                                    {id: 2, text: "Item 3", active: false},
                                    {id: 3, text: "Item 4", active: false},
                                    {id: 4, text: "Item 5", active: false},];

    in-out property <int> current-item-id: 0;
    in-out property <bool> isExpanded: false;

    width:  button-width;
    height: 300px;


    // Current Item Selected
    SimpleButton {
        y: go-up? root.height - button-height : 0px;
        width: button-width;
        height: button-height;
        background: Pallet.input-background;
        border-color: Pallet.input-border;
        border-radius: 0px;
        border-width: 1px;
    
        Text {
            text: items[current-item-id].text;
            font-family: "Roboto";
            font-weight: 700;
            font-size: root.font-size;
            color: root.font-color;
            horizontal-alignment: center;
            vertical-alignment: center;
        }

        clicked => {
            isExpanded = !isExpanded;
            // root.height = root.button-height * (items.length + 1);
        }
    } 
    

    // Item dropdown list
    if isExpanded : Rectangle {
        border-radius: 0px;
        border-width: 1px;
        border-color: Pallet.input-border;
        background: Pallet.input-background.darker(0.2);

        height: (button-height * items.length) + (4px * items.length) - 4px;

        y: go-up ? root.height - self.height - button-height + 1px : button-height -1px;
        x: parent.width / 2 - button-width / 2;

        VerticalLayout {
            spacing: 4px;
    
            for item[i] in items : SimpleButton {
                width: button-width ;
                height: button-height;
    
                background: transparent;
                background-select: transparent;

            
                Text {
                    text: item.text;
                    font-family: "Roboto";
                    font-weight: 500;
                    font-size: root.font-size;
                    color: root.font-color.darker(0.5);
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
    
                clicked => {
                    current-item-id = item.id;
                    isExpanded = false;
                }

                if i < items.length - 1 : Rectangle {
                    height: 1px;
                    width: parent.width - 30px;
                    background: Pallet.input-border.darker(0.9);
                    y: button-height - 1px;
                }
            }
        }
    }
}