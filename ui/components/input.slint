import { Pallet } from "./style.slint";
import { SimpleButton } from "buttons.slint";

export component NumberInput {
    width: 76px;
    height: 28px;

    in property <brush> background: Pallet.input-background;

    in property <length> border-width: 1px;
    in property <brush> border-color: Pallet.input-border;

    in property <length> image-size: 18px;
    in property <length> image-x: 14px;
    in property <length> image-y: 14px;

    in-out property <int> value: 1;
    in property <int> min: 0;
    in property <int> max: 100;

    in property <int> step: 1;


    Rectangle {
        width: parent.width;
        height: parent.height;

        background: parent.background;

        border-width: parent.border-width;
        border-color: parent.border-color;
        
        SimpleButton {
            background: Pallet.input-background;
            background-select: Pallet.input-background.brighter(0.5);

            border-radius: 0;
            height: parent.height - 2px;
            width: (parent.height < parent.width ? parent.height : parent.width) - 2px;
            x: 1px;

            Image {
                source: @image-url("../assets/icons/input_minus.png");
                image-rendering: pixelated;
                colorize: Pallet.input-border;
                x: image-x;
                y: image-y;
                width: image-size;
                height: image-size;
            }

            clicked => {
                if ((value - step) >= min) {
                    value = value - step;
                }
            }
        }

        Text {
            text: value;
            color: Pallet.input-text;
            font-family: "Roboto";
            font-size: 16px;
            font-weight: 500;
        }

        SimpleButton {
            background: Pallet.input-background;
            background-select: Pallet.input-background.brighter(0.5);

            border-radius: 0;
            height: parent.height - 2px;
            width: (parent.height < parent.width ? parent.height : parent.width) - 2px;
            x: parent.width - self.width - 1px;

            Image {
                source: @image-url("../assets/icons/input_plus.png");
                image-rendering: pixelated;
                colorize: Pallet.input-border;
                x: image-x;
                y: image-y;
                width: image-size;
                height: image-size;
            }

            clicked => {
                if ((value + step) <= max) {
                    value = value + step;
                }
            }
        }
    }
}

export component KeypadInput {
    
    width: 240px;
    height: 60px; 

    in-out property <string> value: "1234567890";

    Rectangle {
        background: Pallet.input-keypad-background;
        HorizontalLayout {
            padding-left: 8px;
            padding-right: 3px;
            spacing: 4px;
            Text {
                text: value;
                color: Pallet.input-text;
                vertical-alignment: center;
                horizontal-alignment: right;
                font-family: "Roboto";
                font-size: 24px;
                font-weight: 500;
            }

            SimpleButton {
                
                background: transparent;
                background-select: Pallet.input-keypad-background.brighter(0.2);
                border-radius: 0;
                width: 42px;
                height: 42px;
                y: parent.height / 2 - self.height / 2;

                Image {
                    source: @image-url("../assets/icons/X.png");
                    width: 20px;
                    height: 20px;
                }

                Rectangle {
                    background: Pallet.input-border;
                    border-radius: 0;
                    width: 2px;
                    height: 28px;
                    x: -1px;
                }

                clicked => {
                    value = "";
                }
            }
        }
    }
}



export enum ModalType {
    INFO,
    ERROR,
    CONFIRM
}

export component Modal {
    width: 1280px;
    height: 800px;
    in property <ModalType> type: ModalType.CONFIRM;

    in property <string> title: "Modal Title";
    in property <string> message: "Some text to display in the modal. are you sure you want to do this?";

    // in property <bool> show: false;
    in-out property <int> confirmed: 0; // 0 = nothing, 1 = confirmed, -1 = cancelled

    callback run-after-confirm();
    callback run-after-cancle();

    // SCREEN DARKENING
    Rectangle {
        width: 1280px;
        height: 800px;

        x: 0px;
        y: 0px;

        background: #000000;
        opacity: 0;

        init => {
            self.opacity = 0.8;
        }

        animate background {
            duration: 200ms;
            easing: ease-out;
        }
    }
    
    // MODAL
    main-modal := Rectangle {
        width: 600px;
        height: 325px;

        x: (1280px - self.width) / 2;
        y: (720px - self.height) / 2;

        border-radius: 8px;

        background: #363636;

        opacity: 0;

        init => {
            self.opacity = 1;
        }

        animate background {
            duration: 200ms;
            easing: ease-out;
        }

        // EXIT BUTTON
        if type != ModalType.CONFIRM && type != ModalType.ERROR : SimpleButton {
            width: 40px;
            height: 40px;

            x: parent.width - self.width - 8px;
            y: 8px;

            border-radius: Math.max(self.width / 2, self.height / 2);

            background: transparent;
            background-select: parent.background.brighter(0.3); 

            Image {
                source: @image-url("../assets/icons/X.png");
                width: 20px;
                height: 20px;
            }

            clicked => {
                confirmed = 0;
            }
        }


        // CONFIRM
        if type == ModalType.CONFIRM : confirm-modal := Rectangle {

            VerticalLayout {
                y: 32px;
                alignment: start;
                spacing: 32px;
                // Title
                Text {
                    text: title;
                    font-family: "Roboto";
                    color: #ffffff;
                    font-weight: 700;
                    font-size: 38px;
                    x: 38px;
                }
    
                // Message
                Text {
                    text: message;
                    font-family: "Roboto";
                    color: #ffffff;
                    font-weight: 500;
                    font-size: 16px;
                    x: 38px;
                    width: parent.width - 76px;
                    height: parent.height - 128px;
                }
            } 
            HorizontalLayout {
                height: 50px;
                alignment: center;
                y: parent.height - self.height - 40px;

                spacing: 64px;
                SimpleButton {
                    width: 175px;
                    height: parent.height;

                    background: main-modal.background.brighter(0.5);
                    background-select: main-modal.background.brighter(0.8);
        
                    HorizontalLayout {
                        Text {
                            vertical-alignment: center;
                            horizontal-alignment: center;
                            text: "Cancel";
                            font-family: "Roboto";
                            color: #ffffff;
                            font-weight: 500;
                            font-size: 24px;
                        }
                    }

                    clicked => {
                        confirmed = -1;
                    }
                }

                SimpleButton {
                    width: 175px;
                    height: parent.height;
        
                    HorizontalLayout {
                        Text {
                            vertical-alignment: center;
                            horizontal-alignment: center;
                            text: "Confirm";
                            font-family: "Roboto";
                            color: #ffffff;
                            font-weight: 500;
                            font-size: 24px;
                        }
                    }

                    clicked => {
                        confirmed = 1;
                    }
                }
            }
        }
    }

    changed confirmed => {
        if (confirmed == 1) {
            run-after-confirm();
        }
        else if (confirmed == -1) {
            run-after-cancle();
        };
    }
}

