

//===================================================================================================================\

import "../fonts/lcddot.ttf";
import { OldButton } from "../components/old.slint";


component LDC_Character inherits Rectangle {
    in property <string> text: "0";
    in property <float> size: 1.0;
    Text {
        text: text;
        width: 32px * size;
        height: 52px * size;
        letter-spacing: 4px * size;
        font-family: "LCDDot";
        color: #ffffff;
        horizontal-alignment: center;
        vertical-alignment: center;
        font-size: 40px * size;
    }
}

component Button inherits Rectangle {

    in property <float> size: 1.0;

    width: 100px * size;
    height: 100px * size;
    border-radius: 5px * size;

    property <length> pin-size: 12px * size;
    property <length> knob-size: 65px * size;
    property <color> pin-color: #5a534d;

    // background: #37332f;
    background: @linear-gradient(135deg, #37332f 0%, #605c59 50%, #37332f 100%);

    // pin upper-left
    Rectangle {
        background: @radial-gradient(circle, pin-color 0%, pin-color.brighter(0.1) 100%);
        
        width: pin-size;
        height: pin-size;
        border-radius: 1000px;
        x: 5px;
        y: 5px;
    }

    // pin upper-right
    Rectangle {
        background: @radial-gradient(circle, pin-color.brighter(0.25) 0%, pin-color.brighter(0.3) 80%, pin-color.brighter(0.5) 100%);
        width: pin-size;
        height: pin-size;
        border-radius: 1000px;
        x: parent.width - pin-size - 5px;
        y: 5px;
    }

    // pin lower-left
    Rectangle {
        background: @radial-gradient(circle, pin-color.brighter(0.25) 0%, pin-color.brighter(0.3) 80%, pin-color.brighter(0.5) 100%);
        width: pin-size;
        height: pin-size;
        border-radius: 1000px;
        x: 5px;
        y: parent.height - pin-size - 5px;
    }

    // pin lower-right
    Rectangle {
        background: @radial-gradient(circle, pin-color 0%, pin-color.brighter(0.1) 100%);
        width: pin-size;
        height: pin-size;
        border-radius: 1000px;
        x: parent.width - pin-size - 5px;
        y: parent.height - pin-size - 5px;
    }


    // Button knob
    knob := Rectangle {
        width: knob-size;
        height: knob-size;
        border-radius: 1000px;
        
        background: @radial-gradient(circle, #f6f4ef 70%, #f1ecda 100%);
    }
        

    callback clicked();

    ta := TouchArea {
        clicked => {
            clicked();
            active = !active;
        }
    }

    property <bool> active: false;
    states [
        active when ta.pressed: {
            knob.background: @radial-gradient(circle, #f1ecda 70%, #f6f4ef 100%);
        }
    ]
}

component LCD inherits Rectangle {
    // background: #1837dd;
    background: @radial-gradient(circle, #1837dd.brighter(1) 20%, #1837dd 100%);
    

    property <int> horizontal-cel-count: 8;
    property <int> vertical-cel-count: 2;
    in property <float> size: 1.0;


    width: (30px * horizontal-cel-count) * size;
    height: (50px * vertical-cel-count) * size;

    property <length> text_width: root.width - 1px;
    property <length> text_height: root.height - 5px;

    in property <[string]> chars: ["^", "0", "5", "0", "*", "*", "*", "*", "*", "4", "#", "#", " ", " ", "0", "1"];

    // text
    textRect :=Rectangle {
        width: root.width - 10px * size;
        height: root.height - 20px * size;
        GridLayout {
            Row {
                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[0];
                }
            
                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[1];
                }
                    
                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[2];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[3];
                }
                    
                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[4];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[5];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[6];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[7];
                }
            }   
        
            Row {
                LDC_Character {
                    width: textRect.width / horizontal-cel-count ;
                    size: size;
                    text: chars[8];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[9];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[10];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[11];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[12];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[13];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[14];
                }

                LDC_Character {
                    width: textRect.width / horizontal-cel-count;
                    size: size;
                    text: chars[15];
                }
            }
        }
    }
}

export component SchindlerPage inherits Rectangle {
    background: #ffffff;

    width: 1280px;
    height: 800px;

    callback send-data-to-port(string);

    in-out property <[string]> lcd-text: [ "h", "e", "l", "l", "o", " ", " ", " ", "w", "o", "r", "l", "d", "!", ];

    callback click-esc();
    callback click-up();
    callback click-down();
    callback click-ok();

    callback back-to-menu-page();

    Rectangle {
        background: #9d9d9d;
        height: 300px;
        width: 460px;

        GridLayout {
            // x: root.width / 2;
            // y: root.height / 2;
            padding: 25px;
            spacing-vertical: 20px;
            spacing-horizontal: 10px;
            
            LCD { 
                row: 0;
                col: 0;
                colspan: 3;
                size: 1.7;
                chars: lcd-text;
            }
            
            HorizontalLayout {
                row: 1; col: 0;
                spacing: 20px;

                
                VerticalLayout {
                    Button { 
                        size: 0.6; 
                        clicked => {
                            click-esc();
                        }
                    }
                    Rectangle {
                        background: #ffffff;
                        border-bottom-left-radius: 2px;
                        border-bottom-right-radius: 2px;
                        width: 40px;
                        x: 10px;
                        Text {
                            text: "ESC";
                            font-weight: 700;
                            color: #005116;
                            letter-spacing: -0.5px;

                            vertical-alignment: top;
                            horizontal-alignment: center;
                        }
                    }
                }

                VerticalLayout {
                    Button { 
                        size: 0.6; 
                        clicked => {
                            click-up();
                        }
                    }
                    Rectangle {
                        background: #ffffff;
                        border-bottom-left-radius: 2px;
                        border-bottom-right-radius: 2px;
                        width: 40px;
                        x: 10px;
                        Text {
                            text: "UP";
                            font-weight: 700;
                            color: #005116;
                            letter-spacing: -1px;
                            
                            vertical-alignment: top;
                            horizontal-alignment: center;
                        }
                    }
                }
            }

            HorizontalLayout {
                row: 1; col: 2;
                spacing: 20px;

                VerticalLayout {
                    Button { 
                        size: 0.6; 
                        clicked => {
                            click-down();
                        }
                    }
                    Rectangle {
                        background: #ffffff;
                        border-bottom-left-radius: 2px;
                        border-bottom-right-radius: 2px;
                        width: 40px;
                        x: 10px;
                        Text {
                            text: "DOWN";
                            font-weight: 700;
                            color: #005116;
                            letter-spacing: -1px;

                            
                            vertical-alignment: top;
                            horizontal-alignment: center;
                        }
                    }
                }
                
                VerticalLayout {
                    Button { 
                        size: 0.6; 
                        clicked => {
                            click-ok();
                        }
                    }
                    Rectangle {
                        background: #ffffff;
                        border-bottom-left-radius: 2px;
                        border-bottom-right-radius: 2px;
                        width: 40px;
                        x: 10px;
                        Text {
                            text: "OK";
                            font-weight: 700;
                            color: #005116;
                            letter-spacing: -1px;
                            
                            vertical-alignment: top;
                            horizontal-alignment: center;
                        }
                    }
                }
            }
        }
    }

    OldButton {
        width: 200px;
        height: 50px;
        x: root.width - 200px - 40px;
        y: root.height - 50px - 40px;

        text: "Back";
        font-size: 28px;
        font-weight: 400;

        clicked => {
            back-to-menu-page();
        }
    }
}